{"version":3,"sources":["Form.js","card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","username","handleSubmit","event","a","preventDefault","axios","get","then","resp","console","log","data","props","onSubmit","setState","catch","err","alert","className","id","this","type","aria-describedby","aria-label","value","onChange","target","placeholder","required","Component","Card","profile","src","avatar_url","alt","name","login","company","bio","followers","following","public_repos","href","html_url","rel","CardList","profiles","map","key","App","addNewProfile","profileData","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4VAEqBA,E,4MACjBC,MAAQ,CACJC,SAAU,I,EAEdC,a,uCAAe,WAAOC,GAAP,SAAAC,EAAA,sDACXD,EAAME,iBACRC,IAAMC,IAAN,uCAA0C,EAAKP,MAAMC,WAAYO,MAAK,SAAAC,GAEpEC,QAAQC,IAAIF,EAAKG,MACjB,EAAKC,MAAMC,SAASL,EAAKG,MACzB,EAAKG,SAAS,CAAEd,SAAU,QAC3Be,OAAM,SAAAC,GACLC,MAAM,sBACNR,QAAQC,IAAIM,MATD,2C,6GAaN,IAAD,OACJ,OACI,oCACA,yBAAKE,UAAU,2CACzB,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBC,GAAG,gBAAtC,MAEF,0BAAMN,SAAUO,KAAKnB,cACV,2BACDoB,KAAK,OACLH,UAAW,eACXI,mBAAiB,eACjBC,aAAW,WACXC,MAAOJ,KAAKrB,MAAMC,SAClByB,SAAU,SAAAvB,GAAK,OAAI,EAAKY,SAAS,CAAEd,SAAUE,EAAMwB,OAAOF,SAC1DG,YAAY,kBACZC,UAAQ,KAGV,yBAAKV,UAAU,sBACrB,4BAAQA,UAAU,kBAAkBG,KAAK,UAAzC,mB,GArC8BQ,aCAbC,E,uKAElB,IAAMC,EAAUX,KAAKR,MACrB,OACK,yBAAKM,UAAU,YACrB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,eAAec,IAAKD,EAAQE,WAAYC,IAAKH,EAAQI,OACpE,yBAAKjB,UAAU,aACb,wBAAIA,UAAU,cAAca,EAAQI,MACpC,uBAAGjB,UAAU,aAAY,yCAAkBa,EAAQK,OACnD,uBAAGlB,UAAU,aAAY,wCAAiBa,EAAQM,SAClD,uBAAGnB,UAAU,aAAY,mCAAzB,IAAsCa,EAAQO,KAC9C,uBAAGpB,UAAU,aAAY,yCAAzB,IAA4Ca,EAAQQ,WACpD,uBAAGrB,UAAU,aAAY,yCAAzB,IAA4Ca,EAAQS,WACpD,uBAAGtB,UAAU,aAAY,oCAAzB,IAAuCa,EAAQU,eAGjD,yBAAKvB,UAAU,eACX,4BAAQA,UAAU,mBACd,uBAAGwB,KAAMX,EAAQY,SAAUjB,OAAO,SAASkB,IAAI,uBAA/C,uB,GAnBsBf,aCYnBgB,MAXf,SAAkBjC,GACjB,OACD,yBAAKM,UAAU,aACX,yBAAKA,UAAU,OACfN,EAAMkC,SAASC,KAAI,SAAAhB,GAAO,OAAI,kBAAC,EAAD,eAAMiB,IAAKjB,EAAQZ,IAAQY,QAE5D,+BC2BckB,G,kNA7BblD,MAAQ,CACN+C,SAAU,I,EAEZI,cAAgB,SAACC,GAChB,EAAKrC,UAAS,SAAAsC,GAAS,MAAK,CAC1BN,SAAS,GAAD,mBAAMM,EAAUN,UAAhB,CAA0BK,S,uDAInC,OACE,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,kEACrB,wBAAIA,UAAU,gBAAd,2BAEF,6BAEA,6BAEQ,kBAAC,EAAD,CAAML,SAAUO,KAAK8B,gBAErB,kBAAC,EAAD,CAAUJ,SAAU1B,KAAKrB,MAAM+C,WAC/B,yBAAK5B,UAAU,uDACrB,0BAAMA,UAAU,yBAAhB,gC,GAvBgBW,cCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdpD,OAAM,SAAAqD,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.3c5c9bd2.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport axios from 'axios'\r\nexport default class Form extends Component{\r\n    state = {\r\n        username: ''\r\n    }\r\n    handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n      axios.get(`https://api.github.com/users/${this.state.username}`).then(resp => {\r\n        // do stuff\r\n        console.log(resp.data)\r\n        this.props.onSubmit(resp.data);\r\n        this.setState({ username: '' });\r\n    }).catch(err => {\r\n        alert(\"Username Not Found\")\r\n        console.log(err);\r\n    })\r\n     \r\n    };\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"input-group mb-3 justify-content-center\">\r\n  <div className=\"input-group-prepend\">\r\n    <span className=\"input-group-text\" id=\"basic-addon1\">@</span>\r\n  </div>\r\n  <form onSubmit={this.handleSubmit}>\r\n             <input \r\n            type=\"text\" \r\n            className =\"form-control\"\r\n            aria-describedby=\"basic-addon1\"\r\n            aria-label=\"Username\"\r\n            value={this.state.username}\r\n            onChange={event => this.setState({ username: event.target.value })}\r\n            placeholder=\"GitHub username\" \r\n            required \r\n          />\r\n          </form>\r\n          <div className=\"input-group-append\">\r\n    <button className=\"btn btn-primary\" type=\"button\">Add Card</button>\r\n  </div>\r\n</div>\r\n</>\r\n\r\n            \r\n        )\r\n    }\r\n}","import React,{Component} from 'react';\r\n\r\nexport default class Card extends Component {\r\n\trender() {\r\n  \tconst profile = this.props;\r\n  \treturn (\r\n        <div className=\"col-sm-3\">\r\n  <div className=\"card h-100\">\r\n    <img className=\"card-img-top\" src={profile.avatar_url} alt={profile.name}/>\r\n    <div className=\"card-body\">\r\n      <h5 className=\"card-title\">{profile.name}</h5>\r\n      <p className=\"card-text\"><b>Username: </b>{profile.login}</p>\r\n      <p className=\"card-text\"><b>Company: </b>{profile.company}</p>\r\n      <p className=\"card-text\"><b>Bio:</b> {profile.bio}</p>\r\n      <p className=\"card-text\"><b>Followers:</b> {profile.followers}</p>\r\n      <p className=\"card-text\"><b>Following:</b> {profile.following}</p>\r\n      <p className=\"card-text\"><b>Repo:</b> {profile.public_repos}</p>\r\n\r\n    </div>\r\n    <div className=\"card-footer\">\r\n        <button className=\"btn btn-success\">\r\n            <a href={profile.html_url} target=\"_blank\" rel=\"noopener noreferrer\">Github Link</a>\r\n        </button>\r\n\r\n    </div>\r\n  </div>\r\n  </div>\r\n\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Card from './card'\r\n\r\nfunction CardList(props){\r\n\treturn(\r\n<div className=\"container\">\r\n    <div className=\"row\">\r\n  \t{props.profiles.map(profile => <Card key={profile.id} {...profile}/>)}\r\n\t</div>\r\n\t<br></br>\r\n\t</div>\r\n\t)\r\n\t\r\n}\r\nexport default CardList;","import React, { Component } from 'react';\nimport Form from './Form'\nimport CardList from './CardList'\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    profiles :[],\n  }\n  addNewProfile = (profileData) => {\n  \tthis.setState(prevState => ({\n    \tprofiles: [...prevState.profiles, profileData],\n    }));\n  };\n  render(){\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar sticky-top navbar-light bg-light justify-content-center\">\n  <h4 className=\"navbar-brand\" >Github Cards App React</h4>\n</nav>\n<br>\n</br>\n<br>\n</br>\n        <Form onSubmit={this.addNewProfile}/>\n        \n        <CardList profiles={this.state.profiles} />\n        <nav className=\"navbar navbar-light bg-light justify-content-center\">\n  <span className=\"navbar-brand mb-0 h1 \">Made By patidarparas13</span>\n</nav>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}